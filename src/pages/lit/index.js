import SignMetadata from '@/components/marketplace/SignMetadata'
import { signAuthMessage } from '@/lib/createLighthouseApi'
import lighthouse from '@lighthouse-web3/sdk'
import { useState } from 'react'
import { toast } from 'react-toastify'
import { useAccount } from 'wagmi'
import Layout from '../Layout'
export default function Lit() {
  const {account} = useAccount();
  
  
const [verified, setVerified] = useState("")
const cid = "QmX6iWJ52kKzzkzMgvriwJb5KV1PtpuQ4CQpjM8DE66pGM"
const cid2 = "QmREAx7KiUPNfGGH9myXcMc8dpREX2ym2rKdus4tceMPrt"
const publicVerifier = "0xf129b0D559CFFc195a3C225cdBaDB44c26660B60"

const shareFile = async() =>{

  // Then get auth message and sign
  // Note: the owner of the file should sign the message.
  const {publicKey, signedMessage} = await signAuthMessage();

  const publicKeyUserB = [publicVerifier];
  
  const res = await lighthouse.shareFile(
    publicKey,
    publicKeyUserB,
    cid,
    signedMessage
  );

  console.log(res)
  /*
    data: {
      cid: "QmTTa7rm2nMjz6wCj9pvRsadrCKyDXm5Vmd2YyBubCvGPi",
      shareTo: ["0x201Bcc3217E5AA8e803B41d1F5B6695fFEbD5CeD"],
      status: "Success"
    }
  */
  /*Visit: 
      https://files.lighthouse.storage/viewFile/<cid>  
    To view encrypted file
  */
}
const revokeAccess = async() =>{
  try{
    // CID of encrypted file that you want to share
    // CID is generated by uploading a file with encryption
    // Only the owner of the file can revoke access to another wallet address


    const {signedMessage, publicKey} = await signAuthMessage();

    const revokeResponse = await lighthouse.revokeFileAccess(
      publicKey,
      [publicVerifier],
      cid,
      signedMessage
    );

    console.log(revokeResponse)
    /*
      {
        data: {
          cid: 'Qma7Na9sEdeM6aQeu6bUFW54HktNnW2k8g226VunXBhrn7',
          revokeTo: ['0x487fc2fE07c593EAb555729c3DD6dF85020B5160'],
          status: 'Success'
        }
      }
    */
  } catch(error){
    console.log(error);
  }
}



//litaction
//inputs: cid, sender, tokenID, contractaddress

//inside litaction
// - get metadata CID (format) from contract. 
// -
// lit will do is verify this message
// sender send it ot the contact
// contract will verify it. 

//send to contract = tokenId, metadataCID, rows. <= submitting data. 
//contract will verify dataCID, row, and METADATACID

// unsigned message = metadataCID, row, DataCID
// signedmessage = publickey 

//retrieve the publickey from the signed message => message values


const verifyData = async () => {
    const url = "http://localhost:4000"
    
    const pUrl = "https://apollo-server-gateway.herokuapp.com/"
    
    //share cid with verifier. 
    await shareFile();
      
      const query = `
      query Query($cid: String) {
        verifyCID(cid: $cid)
      }`

        try {    
          const fetchCID = await fetch(pUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    "query": query,
                    "variables": {
                            "cid": cid,
                            }
                        }
                )
            }) 
            
            const result = await fetchCID.json();
            setVerified(result.data.verifyCID)

            if(result.errors){
                toast.error("Error 1: " + result.errors[0].message)
            }
            toast.success("succesfully fetched..")

            
        }catch(e){
            console.log(e)
            toast.error("Error 2: " + e)
        }
        
        //revoke acess
        //revokeAccess();

}

const verifyLit = async () => {
  const query = `
  query Query($cid: String) {
    verifyCID(cid: $cid)
  }`

  const url = "https://apollo-server-gateway.herokuapp.com/";
  const fetchCID = await fetch(url, {
    method: "POST",
    headers: {
        "Content-Type": "application/json",
    },
    body: JSON.stringify({
        "query": query,
        "variables": {
            "cid": cid, //this we need to provide in params 
        }
    }
    )
}).then((response) => response.json());

console.log(fetchCID.data.verifyCID)

const verifiedCID = fetchCID.data.verifyCID;
    const contractFormatCID = "bafkreigpliv6qwuawfwkea45t4rj2fzc6whbapp3awxssjmf3puqd7huve";
    if (verifiedCID != contractFormatCID) {
        return;
    }
    
    return verifiedCID;
}
  return (
    <Layout>
      <SignMetadata />
      
      
      
      <div>
        <h1>Verify a CID if its correct</h1>
        
        <h5>
          CID: 
          {cid}
        </h5>
        <h5>Metadata</h5>
        <span>bafkreigpliv6qwuawfwkea45t4rj2fzc6whbapp3awxssjmf3puqd7huve</span>
        
        <h5>Verified String</h5>
        <span>{verified}</span>
          <button
          className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded'
          onClick={verifyLit}
          >Verify data over http request</button>
      </div>
    </Layout>
  )
}
