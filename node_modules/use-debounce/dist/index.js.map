{"version":3,"file":"index.js","sources":["../src/useDebouncedCallback.ts","../src/useDebounce.ts","../src/useThrottledCallback.ts"],"sourcesContent":["import { useRef, useEffect, useMemo } from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n}\n\nexport interface ControlFunctions {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => void;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function `debounced.callback` return the result of the last func invocation.\n * Note, that if there are no previous invocations it's mean you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any[]) => ReturnType<T>> extends ControlFunctions {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<T extends (...args: any) => ReturnType<T>>(\n  func: T,\n  wait?: number,\n  options?: Options\n): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n\n  useEffect(() => {\n    funcRef.current = func;\n  }, [func]);\n\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      if (timerId.current) {\n        useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [leading, maxing, wait, maxWait, trailing, useRAF]);\n\n  return debounced;\n}\n","import { useCallback, useRef, useState, Dispatch } from 'react';\nimport useDebouncedCallback, { ControlFunctions } from './useDebouncedCallback';\n\nfunction valueEquality<T>(left: T, right: T): boolean {\n  return left === right;\n}\n\nfunction adjustFunctionValueOfSetState<T>(value: T): T | (() => T) {\n  return typeof value === 'function' ? () => value : value;\n}\n\nfunction useStateIgnoreCallback<T>(initialState: T): [T, Dispatch<T>] {\n  const [state, setState] = useState(adjustFunctionValueOfSetState(initialState));\n  const setStateIgnoreCallback = useCallback((value: T) => setState(adjustFunctionValueOfSetState(value)), []);\n  return [state, setStateIgnoreCallback];\n}\n\nexport default function useDebounce<T>(\n  value: T,\n  delay: number,\n  options?: { maxWait?: number; leading?: boolean; trailing?: boolean; equalityFn?: (left: T, right: T) => boolean }\n): [T, ControlFunctions] {\n  const eq = (options && options.equalityFn) || valueEquality;\n\n  const [state, dispatch] = useStateIgnoreCallback(value);\n  const debounced = useDebouncedCallback(useCallback((value: T) => dispatch(value), [dispatch]), delay, options);\n  const previousValue = useRef(value);\n\n  if (!eq(previousValue.current, value)) {\n    debounced(value);\n    previousValue.current = value;\n  }\n\n  return [state, debounced];\n}\n","import useDebouncedCallback, { CallOptions, DebouncedState } from './useDebouncedCallback';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame).\n *\n * The throttled function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the throttled function.\n *\n * Subsequent calls to the throttled function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * const scrollHandler = useThrottledCallback(updatePosition, 100)\n * window.addEventListener('scroll', scrollHandler)\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const { callback } = useThrottledCallback(renewToken, 300000, { 'trailing': false })\n * <button onClick={callback}>click</button>\n *\n * // Cancel the trailing throttled invocation.\n * window.addEventListener('popstate', throttled.cancel);\n */\nexport default function useThrottledCallback<T extends (...args: any[]) => ReturnType<T>>(\n  func: T,\n  wait: number,\n  { leading = true, trailing = true }: CallOptions = {}\n): DebouncedState<T> {\n  return useDebouncedCallback(func, wait, {\n    maxWait: wait,\n    leading,\n    trailing,\n  });\n}\n"],"names":["useDebouncedCallback","func","wait","options","lastCallTime","useRef","lastInvokeTime","timerId","lastArgs","lastThis","result","funcRef","mounted","useEffect","current","useRAF","window","TypeError","leading","trailing","maxing","maxWait","Math","max","debounced","useMemo","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","cancelAnimationFrame","requestAnimationFrame","setTimeout","shouldInvoke","timeSinceLastCall","trailingEdge","timerExpired","Date","now","timeWaiting","remainingWait","min","isInvoking","slice","call","arguments","_this","cancel","clearTimeout","isPending","flush","valueEquality","left","right","adjustFunctionValueOfSetState","value","useDebounce","delay","setState","eq","equalityFn","_useStateIgnoreCallba","useState","_useState","useCallback","state","dispatch","previousValue","_temp","_ref","_ref$trailing","_ref$leading"],"mappings":"uBA6GwB,SAAAA,EACtBC,EACAC,EACAC,cAEMC,EAAeC,EAAAA,OAAO,MACtBC,EAAiBD,EAAAA,OAAO,GACxBE,EAAUF,EAAMA,OAAC,MACjBG,EAAWH,SAAkB,IAC7BI,EAAWJ,WACXK,EAASL,WACTM,EAAUN,SAAOJ,GACjBW,EAAUP,EAAAA,QAAO,GAEvBQ,EAASA,UAAC,WACRF,EAAQG,QAAUb,GACjB,CAACA,IAGJ,IAAMc,GAAUb,GAAiB,IAATA,GAAgC,oBAAXc,OAE7C,GAAoB,mBAATf,EACT,MAAM,IAAIgB,UAAU,uBAGtBf,GAAQA,GAAQ,EAGhB,IAAMgB,KAFNf,EAAUA,GAAW,IAEKe,QACpBC,IAAW,aAAchB,MAAYA,EAAQgB,SAC7CC,EAAS,YAAajB,EACtBkB,EAAUD,EAASE,KAAKC,KAAKpB,EAAQkB,SAAW,EAAGnB,GAAQ,KAEjEW,EAASA,UAAC,WAER,OADAD,EAAQE,SAAU,aAEhBF,EAAQE,SAAU,IAEnB,IAYH,IAAMU,EAAYC,EAAOA,QAAC,WACxB,IAAMC,EAAa,SAACC,GAClB,IAAMC,EAAOpB,EAASM,QAChBe,EAAUpB,EAASK,QAIzB,OAFAN,EAASM,QAAUL,EAASK,QAAU,KACtCR,EAAeQ,QAAUa,EACjBjB,EAAOI,QAAUH,EAAQG,QAAQgB,MAAMD,EAASD,IAGpDG,EAAa,SAACC,EAAyB9B,GACvCa,GAAQkB,qBAAqB1B,EAAQO,SACzCP,EAAQO,QAAUC,EAASmB,sBAAsBF,GAAeG,WAAWH,EAAa9B,IAGpFkC,EAAe,SAACT,GACpB,IAAKf,EAAQE,QAAS,OAAO,EAE7B,IAAMuB,EAAoBV,EAAOvB,EAAaU,QAM9C,OACGV,EAAaU,SACduB,GAAqBnC,GACrBmC,EAAoB,GACnBjB,GATyBO,EAAOrB,EAAeQ,SASdO,GAIhCiB,EAAe,SAACX,GAKpB,OAJApB,EAAQO,QAAU,KAIdK,GAAYX,EAASM,QAChBY,EAAWC,IAEpBnB,EAASM,QAAUL,EAASK,QAAU,KAC/BJ,EAAOI,UAGVyB,EAAe,SAAfA,IACJ,IAAMZ,EAAOa,KAAKC,MAClB,GAAIL,EAAaT,GACf,OAAOW,EAAaX,GAGtB,GAAKf,EAAQE,QAAb,CAIA,IAEM4B,EAAcxC,GAFMyB,EAAOvB,EAAaU,SAGxC6B,EAAgBvB,EAASE,KAAKsB,IAAIF,EAAarB,GAFzBM,EAAOrB,EAAeQ,UAEoC4B,EAGtFX,EAAWQ,EAAcI,KAGrB1C,EAA0B,WAC9B,IAAM0B,EAAOa,KAAKC,MACZI,EAAaT,EAAaT,GAMhC,GAJAnB,EAASM,QAAT,GAAAgC,MAAAC,KAAAC,WACAvC,EAASK,QAAUmC,EACnB7C,EAAaU,QAAUa,EAEnBkB,EAAY,CACd,IAAKtC,EAAQO,SAAWF,EAAQE,QAM9B,OAJAR,EAAeQ,QAAUV,EAAaU,QAEtCiB,EAAWQ,EAAcrC,GAElBgB,EAAUQ,EAAWtB,EAAaU,SAAWJ,EAAOI,QAE7D,GAAIM,EAGF,OADAW,EAAWQ,EAAcrC,GAClBwB,EAAWtB,EAAaU,SAMnC,OAHKP,EAAQO,SACXiB,EAAWQ,EAAcrC,GAEpBQ,EAAOI,SAmBhB,OAhBAb,EAAKiD,OAAS,WACR3C,EAAQO,UACVC,EAASkB,qBAAqB1B,EAAQO,SAAWqC,aAAa5C,EAAQO,UAExER,EAAeQ,QAAU,EACzBN,EAASM,QAAUV,EAAaU,QAAUL,EAASK,QAAUP,EAAQO,QAAU,MAGjFb,EAAKmD,UAAY,WACf,QAAS7C,EAAQO,SAGnBb,EAAKoD,MAAQ,WACX,OAAQ9C,EAAQO,QAA2BwB,EAAaE,KAAKC,OAAnC/B,EAAOI,SAG5Bb,GACN,CAACiB,EAASE,EAAQlB,EAAMmB,EAASF,EAAUJ,IAE9C,OAAOS,EC3QT,SAAS8B,EAAiBC,EAASC,GACjC,OAAOD,IAASC,EAGlB,SAASC,EAAiCC,GACxC,MAAwB,mBAAVA,EAAuB,WAAA,OAAMA,GAAQA,sBAS7BC,SACtBD,EACAE,EACAzD,GAEA,MAVc0D,EAURC,EAAM3D,GAAWA,EAAQ4D,YAAeT,EAE9CU,KAZ0BC,WAASR,EAYcC,IAZnCG,EACdK,EAAA,GACO,CAFOL,EAAAA,GACiBM,cAAY,SAACT,GAAD,OAAcG,EAASJ,EAA8BC,KAAS,MAWlGU,OAAOC,EAAdL,EAAA,GACMxC,EAAYxB,EAAqBmE,cAAY,SAACT,GAAaW,OAAAA,EAASX,IAAQ,CAACW,IAAYT,EAAOzD,GAChGmE,EAAgBjE,EAAMA,OAACqD,GAO7B,OALKI,EAAGQ,EAAcxD,QAAS4C,KAC7BlC,EAAUkC,GACVY,EAAcxD,QAAU4C,GAGnB,CAACU,EAAO5C,gECqBH,SACZvB,EACAC,EAFYqE,GAGuC,IAAAC,OAAA,IAAAD,EAAA,GAAjDrD,EAAAA,EAAAA,EAAAA,QAAmDuD,EAAAD,EAAnCrD,SAElB,OAAOnB,EAAqBC,EAAMC,EAAM,CACtCmB,QAASnB,EACTgB,aAJmD,IAAAwD,GAAAA,EAKnDvD,cAL2B,IAAAsD"}