{"version":3,"file":"index.cjs.js","sources":["../src/types/engine.ts","../src/types/client.ts","../src/constants/defaults.ts","../src/constants/engine.ts","../src/constants/client.ts","../src/constants/expirer.ts","../src/utils/address.ts","../src/utils/signature.ts","../src/utils/store.ts","../src/utils/validators.ts","../src/controllers/engine.ts","../src/client.ts","../src/utils/crypto.ts","../src/index.ts"],"sourcesContent":["import { CryptoTypes, RelayerTypes } from \"@walletconnect/types\";\n\nimport {\n  ErrorResponse as CommonErrorResponse,\n  JsonRpcError,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  JsonRpcResult,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { AuthClientTypes, IAuthClient } from \"./client\";\nimport { JsonRpcTypes } from \"./jsonrpc\";\n\nexport interface RpcOpts {\n  req: RelayerTypes.PublishOptions;\n  res: RelayerTypes.PublishOptions;\n}\n\nexport declare namespace AuthEngineTypes {\n  interface EventCallback<T extends JsonRpcRequest | JsonRpcResponse> {\n    topic: string;\n    payload: T;\n  }\n\n  // https://github.com/ChainAgnostic/CAIPs/pull/74\n  interface RequestParams {\n    chainId: string;\n    domain: string;\n    nonce: string;\n    aud: string;\n    type?: CacaoHeader[\"t\"];\n    nbf?: string;\n    exp?: string;\n    statement?: string;\n    requestId?: string;\n    resources?: string[];\n    expiry?: number;\n  }\n\n  interface PayloadParams {\n    type: CacaoHeader[\"t\"];\n    chainId: string;\n    domain: string;\n    aud: string;\n    version: string;\n    nonce: string;\n    iat: string;\n    nbf?: string;\n    exp?: string;\n    statement?: string;\n    requestId?: string;\n    resources?: string[];\n  }\n  interface CacaoPayload {\n    iss: string;\n    domain: string;\n    aud: string;\n    version: string;\n    nonce: string;\n    iat: string;\n    nbf?: string;\n    exp?: string;\n    chainId?: string;\n    statement?: string;\n    requestId?: string;\n    resources?: string[];\n  }\n\n  type CacaoRequestPayload = Omit<CacaoPayload, \"iss\">;\n\n  interface CacaoHeader {\n    t: \"eip4361\";\n  }\n\n  interface CacaoSignature {\n    t: \"eip191\" | \"eip1271\";\n    s: string;\n    m?: string;\n  }\n\n  interface Cacao {\n    h: CacaoHeader;\n    p: CacaoPayload;\n    s: CacaoSignature;\n  }\n\n  interface PendingRequest {\n    id: number;\n    requester: {\n      publicKey: string;\n      metadata: AuthClientTypes.Metadata;\n    };\n    cacaoPayload: CacaoRequestPayload;\n  }\n\n  interface ResultResponse {\n    id: number;\n    signature: CacaoSignature;\n  }\n\n  interface ErrorResponse {\n    id: number;\n    error: CommonErrorResponse;\n  }\n\n  type RespondParams = ResultResponse | ErrorResponse;\n}\n\nexport abstract class IAuthEngine {\n  constructor(public client: IAuthClient) {}\n\n  public abstract init(): void;\n\n  public abstract request(\n    params: AuthEngineTypes.RequestParams,\n    opts?: { topic?: string },\n  ): Promise<{ uri?: string; id: number }>;\n\n  public abstract respond(params: AuthEngineTypes.RespondParams, iss: string): Promise<void>;\n\n  public abstract getPendingRequests(): Record<number, AuthEngineTypes.PendingRequest>;\n\n  public abstract formatMessage(payload: AuthEngineTypes.CacaoRequestPayload, iss: string): string;\n\n  // ---------- Protected Helpers --------------------------------------- //\n\n  protected abstract sendRequest<M extends JsonRpcTypes.WcMethod>(\n    topic: string,\n    method: M,\n    params: JsonRpcTypes.RequestParams[M],\n    encodeOpts?: CryptoTypes.EncodeOptions,\n    expiry?: number,\n  ): Promise<number>;\n\n  protected abstract sendResult<M extends JsonRpcTypes.WcMethod>(\n    id: number,\n    topic: string,\n    result: JsonRpcTypes.Results[M],\n    encodeOpts?: CryptoTypes.EncodeOptions,\n  ): Promise<number>;\n\n  protected abstract sendError(\n    id: number,\n    topic: string,\n    error: AuthEngineTypes.ErrorResponse,\n    opts?: CryptoTypes.EncodeOptions,\n  ): Promise<number>;\n\n  protected abstract setExpiry(topic: string, expiry: number): Promise<void>;\n\n  // ---------- Protected Relay Event Methods ----------------------------------- //\n\n  protected abstract onRelayEventRequest(\n    event: AuthEngineTypes.EventCallback<JsonRpcRequest>,\n  ): void;\n\n  protected abstract onRelayEventResponse(\n    event: AuthEngineTypes.EventCallback<JsonRpcResponse>,\n  ): Promise<void>;\n\n  // ---------- Protected Relay Event Handlers --------------------------------- //\n\n  protected abstract onAuthRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_authRequest\"]>,\n  ): Promise<void>;\n\n  protected abstract onAuthResponse(\n    topic: string,\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_authRequest\"]> | JsonRpcError,\n  ): void;\n}\n","import { ICore, IStore, CoreTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { AuthEngineTypes } from \"./engine\";\n\nimport { IAuthEngine } from \"../types\";\nimport { JsonRpcError, JsonRpcResult } from \"@walletconnect/jsonrpc-utils\";\nimport { Logger } from \"@walletconnect/logger\";\n\nexport declare namespace AuthClientTypes {\n  type Event = \"auth_request\" | \"auth_response\";\n\n  interface AuthRequestEventArgs {\n    requester: AuthEngineTypes.PendingRequest[\"requester\"];\n    cacaoPayload: AuthEngineTypes.CacaoRequestPayload;\n  }\n\n  type AuthResponseEventArgs =\n    | { message: string; code: number }\n    | JsonRpcResult<AuthEngineTypes.Cacao>\n    | JsonRpcError;\n\n  interface BaseEventArgs<T = unknown> {\n    id: number;\n    topic: string;\n    params: T;\n  }\n\n  interface EventArguments {\n    auth_request: BaseEventArgs<AuthRequestEventArgs>;\n    auth_response: BaseEventArgs<AuthResponseEventArgs>;\n  }\n\n  interface Options extends CoreTypes.Options {\n    metadata: Metadata;\n    core?: ICore;\n    projectId: string;\n  }\n\n  interface Metadata {\n    name: string;\n    description: string;\n    url: string;\n    icons: string[];\n    redirect?: {\n      native?: string;\n      universal?: string;\n    };\n  }\n}\n\nexport abstract class IAuthClient {\n  public abstract readonly protocol: string;\n  public abstract readonly version: number;\n  public abstract readonly name: string;\n\n  public abstract core: ICore;\n  public abstract metadata: AuthClientTypes.Metadata;\n  public abstract projectId: string;\n  public abstract authKeys: IStore<string, { responseTopic: string; publicKey: string }>;\n  public abstract pairingTopics: IStore<string, { topic: string; pairingTopic: string }>;\n  public abstract requests: IStore<\n    number,\n    { id: number } & (AuthEngineTypes.Cacao | AuthEngineTypes.PendingRequest)\n  >;\n\n  public abstract events: EventEmitter;\n  public abstract logger: Logger;\n  public abstract engine: IAuthEngine;\n\n  constructor(public opts: AuthClientTypes.Options) {}\n\n  // ---------- Public Methods ----------------------------------------------- //\n\n  public abstract request: IAuthEngine[\"request\"];\n  public abstract respond: IAuthEngine[\"respond\"];\n  public abstract formatMessage: IAuthEngine[\"formatMessage\"];\n  public abstract getPendingRequests: IAuthEngine[\"getPendingRequests\"];\n\n  // ---------- Event Handlers ----------------------------------------------- //\n\n  public abstract emit: <E extends AuthClientTypes.Event>(\n    event: E,\n    args: AuthClientTypes.EventArguments[E],\n  ) => boolean;\n\n  public abstract on: <E extends AuthClientTypes.Event>(\n    event: E,\n    listener: (args: AuthClientTypes.EventArguments[E]) => void,\n  ) => EventEmitter;\n\n  public abstract once: <E extends AuthClientTypes.Event>(\n    event: E,\n    listener: (args: AuthClientTypes.EventArguments[E]) => void,\n  ) => EventEmitter;\n\n  public abstract off: <E extends AuthClientTypes.Event>(\n    event: E,\n    listener: (args: AuthClientTypes.EventArguments[E]) => void,\n  ) => EventEmitter;\n\n  public abstract removeListener: <E extends AuthClientTypes.Event>(\n    event: E,\n    listener: (args: AuthClientTypes.EventArguments[E]) => void,\n  ) => EventEmitter;\n}\n","export const DEFAULT_RPC_URL = \"https://rpc.walletconnect.com/v1\";\n","import { ONE_DAY, FIVE_MINUTES, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { JsonRpcTypes, RpcOpts } from \"../types\";\n\nexport const ENGINE_RPC_OPTS: Record<JsonRpcTypes.WcMethod, RpcOpts> = {\n  wc_authRequest: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: true,\n      tag: 3000,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 3001,\n    },\n  },\n};\n\nexport const AUTH_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n","export const AUTH_CLIENT_PROTOCOL = \"wc\";\nexport const AUTH_CLIENT_VERSION = 1;\nexport const AUTH_CLIENT_CONTEXT = \"auth\";\nexport const AUTH_CLIENT_DEFAULT_NAME = \"authClient\";\n\nexport const AUTH_CLIENT_STORAGE_PREFIX = `${AUTH_CLIENT_PROTOCOL}@${AUTH_CLIENT_VERSION}:${AUTH_CLIENT_CONTEXT}:`;\nexport const AUTH_CLIENT_PUBLIC_KEY_NAME = `${AUTH_CLIENT_STORAGE_PREFIX}:PUB_KEY`;\n","import { ONE_DAY } from \"@walletconnect/time\";\n\nexport const EXPIRER_CONTEXT = \"expirer\";\n\nexport const EXPIRER_EVENTS = {\n  created: \"expirer_created\",\n  deleted: \"expirer_deleted\",\n  expired: \"expirer_expired\",\n  sync: \"expirer_sync\",\n};\n\nexport const EXPIRER_STORAGE_VERSION = \"0.3\";\n\nexport const EXPIRER_DEFAULT_TTL = ONE_DAY;\n","export function getDidAddressSegments(iss: string) {\n  return iss?.split(\":\");\n}\n\nexport function getDidChainId(iss: string) {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[3];\n  }\n  return undefined;\n}\n\nexport function getNamespacedDidChainId(iss: string) {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[2] + \":\" + segments[3];\n  }\n  return undefined;\n}\n\nexport function getDidAddress(iss: string) {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments.pop();\n  }\n  return undefined;\n}\n","import { hashMessage } from \"@ethersproject/hash\";\nimport { recoverAddress } from \"@ethersproject/transactions\";\nimport fetch from \"isomorphic-unfetch\";\n\nimport { AuthEngineTypes } from \"../types\";\nimport { DEFAULT_RPC_URL } from \"../constants/defaults\";\n\nexport async function verifySignature(\n  address: string,\n  reconstructedMessage: string,\n  cacaoSignature: AuthEngineTypes.CacaoSignature,\n  chainId: string,\n  projectId: string,\n): Promise<boolean> {\n  // Determine if this signature is from an EOA or a contract.\n  switch (cacaoSignature.t) {\n    case \"eip191\":\n      return isValidEip191Signature(address, reconstructedMessage, cacaoSignature.s);\n    case \"eip1271\":\n      return await isValidEip1271Signature(\n        address,\n        reconstructedMessage,\n        cacaoSignature.s,\n        chainId,\n        projectId,\n      );\n    default:\n      throw new Error(\n        `verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${cacaoSignature.t}`,\n      );\n  }\n}\n\nfunction isValidEip191Signature(address: string, message: string, signature: string): boolean {\n  const recoveredAddress = recoverAddress(hashMessage(message), signature);\n  return recoveredAddress.toLowerCase() === address.toLowerCase();\n}\n\nasync function isValidEip1271Signature(\n  address: string,\n  reconstructedMessage: string,\n  signature: string,\n  chainId: string,\n  projectId: string,\n) {\n  try {\n    const eip1271MagicValue = \"0x1626ba7e\";\n    const dynamicTypeOffset = \"0000000000000000000000000000000000000000000000000000000000000040\";\n    const dynamicTypeLength = \"0000000000000000000000000000000000000000000000000000000000000041\";\n    const nonPrefixedSignature = signature.substring(2);\n    const nonPrefixedHashedMessage = hashMessage(reconstructedMessage).substring(2);\n\n    const data =\n      eip1271MagicValue +\n      nonPrefixedHashedMessage +\n      dynamicTypeOffset +\n      dynamicTypeLength +\n      nonPrefixedSignature;\n\n    const response = await fetch(`${DEFAULT_RPC_URL}/?chainId=${chainId}&projectId=${projectId}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        id: generateJsonRpcId(),\n        jsonrpc: \"2.0\",\n        method: \"eth_call\",\n        params: [{ to: address, data }, \"latest\"],\n      }),\n    });\n    const { result } = await response.json();\n\n    if (!result) return false;\n\n    // Remove right-padded zeros from result to get only the concrete recovered value.\n    const recoveredValue = result.slice(0, eip1271MagicValue.length);\n    return recoveredValue.toLowerCase() === eip1271MagicValue.toLowerCase();\n  } catch (error: any) {\n    console.error(\"isValidEip1271Signature: \", error);\n    return false;\n  }\n}\n\nfunction generateJsonRpcId() {\n  return Date.now() + Math.floor(Math.random() * 1000);\n}\n","import { AuthEngineTypes, IAuthClient } from \"../types\";\n\nexport function getPendingRequests(store: IAuthClient[\"requests\"]) {\n  return store.getAll().filter((request) => \"requester\" in request) as ({\n    id: number;\n  } & AuthEngineTypes.PendingRequest)[];\n}\n\nexport function getCompleteRequests(store: IAuthClient[\"requests\"]) {\n  return store.getAll().filter((request) => !(\"requester\" in request)) as ({\n    id: number;\n  } & AuthEngineTypes.Cacao)[];\n}\n\nexport function getPendingRequest(store: IAuthClient[\"requests\"], id: number) {\n  return getPendingRequests(store).find(\n    (request) => request.id === id,\n  ) as AuthEngineTypes.PendingRequest;\n}\n\nexport function getCompleteResponse(store: IAuthClient[\"requests\"], id: number) {\n  return getCompleteRequests(store).find((request) => request.id === id) as AuthEngineTypes.Cacao;\n}\n","import { IStore } from \"@walletconnect/types\";\nimport { getInternalError, isValidRequestExpiry, isValidUrl } from \"@walletconnect/utils\";\nimport { AUTH_REQUEST_EXPIRY_BOUNDARIES } from \"../constants\";\nimport { AuthEngineTypes } from \"../types\";\nimport { getPendingRequest } from \"./store\";\n\nexport function isValidRequest(params: AuthEngineTypes.RequestParams): boolean {\n  const validAudience = isValidUrl(params.aud);\n  // FIXME: disabling this temporarily since it's failing expected values like `chainId: \"1\"`\n  // const validChainId = isValidChainId(params.chainId);\n  const domainInAud = new RegExp(`${params.domain}`).test(params.aud);\n  const hasNonce = !!params.nonce;\n  const hasValidType = params.type ? params.type === \"eip4361\" : true;\n  const expiry = params.expiry;\n  if (expiry && !isValidRequestExpiry(expiry, AUTH_REQUEST_EXPIRY_BOUNDARIES)) {\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${AUTH_REQUEST_EXPIRY_BOUNDARIES.min} and ${AUTH_REQUEST_EXPIRY_BOUNDARIES.max}`,\n    );\n    throw new Error(message);\n  }\n\n  return !!(validAudience /*&& validChainId*/ && domainInAud && hasNonce && hasValidType);\n}\n\nexport function isValidRespond(\n  params: AuthEngineTypes.RespondParams,\n  pendingResponses: IStore<number, any>,\n): boolean {\n  const validId = getPendingRequest(pendingResponses, params.id);\n\n  return !!validId;\n}\n","import { RELAYER_EVENTS } from \"@walletconnect/core\";\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { RelayerTypes } from \"@walletconnect/types\";\nimport { getInternalError, hashKey, TYPE_1 } from \"@walletconnect/utils\";\nimport { AUTH_CLIENT_PUBLIC_KEY_NAME, ENGINE_RPC_OPTS } from \"../constants\";\nimport { AuthEngineTypes, IAuthEngine, JsonRpcTypes } from \"../types\";\nimport { getDidAddress, getDidChainId, getNamespacedDidChainId } from \"../utils/address\";\nimport { verifySignature } from \"../utils/signature\";\nimport { getPendingRequest, getPendingRequests } from \"../utils/store\";\nimport { isValidRequest, isValidRespond } from \"../utils/validators\";\n\nexport class AuthEngine extends IAuthEngine {\n  private initialized = false;\n  public name = \"authEngine\";\n\n  constructor(client: IAuthEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IAuthEngine[\"init\"] = () => {\n    if (!this.initialized) {\n      this.registerRelayerEvents();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n    }\n  };\n\n  // ---------- Public ------------------------------------------------ //\n\n  public request: IAuthEngine[\"request\"] = async (params, opts) => {\n    this.isInitialized();\n\n    if (!isValidRequest(params)) {\n      throw new Error(\"Invalid request\");\n    }\n\n    if (opts?.topic) {\n      return await this.requestOnKnownPairing(opts.topic, params);\n    }\n\n    // SPEC: A will construct an authentication request.\n    const { chainId, statement, aud, domain, nonce, type } = params;\n\n    const { topic: pairingTopic, uri } = await this.client.core.pairing.create();\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await this.client.authKeys.set(AUTH_CLIENT_PUBLIC_KEY_NAME, { responseTopic, publicKey });\n    await this.client.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic });\n\n    // Subscribe to auth_response topic\n    await this.client.core.relayer.subscribe(responseTopic);\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    // SPEC: A encrypts reuqest with symKey S\n    // SPEC: A publishes encrypted request to topic\n    const id = await this.sendRequest(\n      pairingTopic,\n      \"wc_authRequest\",\n      {\n        payloadParams: {\n          type: type ?? \"eip4361\",\n          chainId,\n          statement,\n          aud,\n          domain,\n          version: \"1\",\n          nonce,\n          iat: new Date().toISOString(),\n        },\n        requester: { publicKey, metadata: this.client.metadata },\n      },\n      {},\n      params.expiry,\n    );\n\n    this.client.logger.info(`sent request to new pairing topic: ${pairingTopic}`);\n\n    return { uri, id };\n  };\n\n  public respond: IAuthEngine[\"respond\"] = async (respondParams, iss) => {\n    this.isInitialized();\n\n    if (!isValidRespond(respondParams, this.client.requests)) {\n      throw new Error(\"Invalid response\");\n    }\n\n    const pendingRequest = getPendingRequest(this.client.requests, respondParams.id);\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    if (\"error\" in respondParams) {\n      await this.sendError(pendingRequest.id, responseTopic, respondParams, encodeOpts);\n      return;\n    }\n\n    const cacao: AuthEngineTypes.Cacao = {\n      h: {\n        t: \"eip4361\",\n      },\n      p: {\n        ...pendingRequest.cacaoPayload,\n        iss,\n      },\n      s: respondParams.signature,\n    };\n\n    const id = await this.sendResult<\"wc_authRequest\">(\n      pendingRequest.id,\n      responseTopic,\n      cacao,\n      encodeOpts,\n    );\n\n    await this.client.requests.set(id, { id, ...cacao });\n  };\n\n  public getPendingRequests: IAuthEngine[\"getPendingRequests\"] = () => {\n    const pendingRequests = getPendingRequests(this.client.requests);\n    return pendingRequests;\n  };\n\n  public formatMessage = (cacao: AuthEngineTypes.CacaoPayload, iss: string) => {\n    this.client.logger.debug(`formatMessage, cacao is: ${JSON.stringify(cacao)}`);\n\n    const header = `${cacao.domain} wants you to sign in with your Ethereum account:`;\n    const walletAddress = getDidAddress(iss);\n    const statement = cacao.statement;\n    const uri = `URI: ${cacao.aud}`;\n    const version = `Version: ${cacao.version}`;\n    const chainId = `Chain ID: ${getDidChainId(iss)}`;\n    const nonce = `Nonce: ${cacao.nonce}`;\n    const issuedAt = `Issued At: ${cacao.iat}`;\n    const resources =\n      cacao.resources && cacao.resources.length > 0\n        ? `Resources:\\n${cacao.resources.map((resource) => `- ${resource}`).join(\"\\n\")}`\n        : undefined;\n\n    const message = [\n      header,\n      walletAddress,\n      ``,\n      statement,\n      ``,\n      uri,\n      version,\n      chainId,\n      nonce,\n      issuedAt,\n      resources,\n    ]\n      .filter((val) => val !== undefined && val !== null) // remove unnecessary empty lines\n      .join(\"\\n\");\n\n    return message;\n  };\n\n  // ---------- Protected/Private Helpers --------------------------------------- //\n\n  protected setExpiry: IAuthEngine[\"setExpiry\"] = async (topic, expiry) => {\n    if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.updateExpiry({ topic, expiry });\n    }\n    this.client.core.expirer.set(topic, expiry);\n  };\n\n  protected sendRequest: IAuthEngine[\"sendRequest\"] = async (\n    topic,\n    method,\n    params,\n    encodeOpts,\n    expiry,\n  ) => {\n    const payload = formatJsonRpcRequest(method, params);\n    const message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\n    const rpcOpts = ENGINE_RPC_OPTS[method].req;\n    if (expiry) rpcOpts.ttl = expiry;\n    this.client.core.history.set(topic, payload);\n    await this.client.core.relayer.publish(topic, message, rpcOpts);\n\n    return payload.id;\n  };\n\n  protected sendResult: IAuthEngine[\"sendResult\"] = async (id, topic, result, encodeOpts) => {\n    const payload = formatJsonRpcResult(id, result);\n    const message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\n    const record = await this.client.core.history.get(topic, id);\n    const rpcOpts = ENGINE_RPC_OPTS[record.request.method].res;\n\n    await this.client.core.relayer.publish(topic, message, rpcOpts);\n    await this.client.core.history.resolve(payload);\n\n    return payload.id;\n  };\n\n  protected sendError: IAuthEngine[\"sendError\"] = async (id, topic, params, encodeOpts) => {\n    const payload = formatJsonRpcError(id, params.error);\n    const message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\n    const record = await this.client.core.history.get(topic, id);\n    const rpcOpts = ENGINE_RPC_OPTS[record.request.method].res;\n\n    await this.client.core.relayer.publish(topic, message, rpcOpts);\n    await this.client.core.history.resolve(payload);\n\n    return payload.id;\n  };\n\n  private requestOnKnownPairing = async (topic: string, params: AuthEngineTypes.RequestParams) => {\n    const knownPairing = this.client.core.pairing.pairings\n      .getAll({ active: true })\n      .find((pairing) => pairing.topic === topic);\n\n    if (!knownPairing) throw new Error(`Could not find pairing for provided topic ${topic}`);\n\n    const { publicKey } = this.client.authKeys.get(AUTH_CLIENT_PUBLIC_KEY_NAME);\n    const { chainId, statement, aud, domain, nonce, type } = params;\n\n    // Send request to existing pairing\n    const id = await this.sendRequest(\n      knownPairing.topic,\n      \"wc_authRequest\",\n      {\n        payloadParams: {\n          type: type ?? \"eip4361\",\n          chainId,\n          statement,\n          aud,\n          domain,\n          version: \"1\",\n          nonce,\n          iat: new Date().toISOString(),\n        },\n        requester: { publicKey, metadata: this.client.metadata },\n      },\n      {},\n      params.expiry,\n    );\n\n    this.client.logger.info(`sent request to known pairing topic: ${knownPairing.topic}`);\n    return { id };\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(\n      RELAYER_EVENTS.message,\n      async (event: RelayerTypes.MessageEvent) => {\n        const { topic, message } = event;\n\n        // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n        const { responseTopic, publicKey } = this.client.authKeys.keys.includes(\n          AUTH_CLIENT_PUBLIC_KEY_NAME,\n        )\n          ? this.client.authKeys.get(AUTH_CLIENT_PUBLIC_KEY_NAME)\n          : { responseTopic: undefined, publicKey: undefined };\n\n        // If there's an expected responseTopic/publicKey, we only proceed if this message's topic matches,\n        // otherwise we're attempting to decrypt another client's TYPE_1 envelope with the wrong publicKey.\n        if (responseTopic && topic !== responseTopic) {\n          this.client.logger.debug(\"[Auth] Ignoring message from unknown topic\", topic);\n          return;\n        }\n\n        const payload = await this.client.core.crypto.decode(topic, message, {\n          receiverPublicKey: publicKey,\n        });\n        if (isJsonRpcRequest(payload)) {\n          this.client.core.history.set(topic, payload);\n          this.onRelayEventRequest({ topic, payload });\n        } else if (isJsonRpcResponse(payload)) {\n          await this.client.core.history.resolve(payload);\n          this.onRelayEventResponse({ topic, payload });\n        }\n      },\n    );\n  }\n\n  protected onRelayEventRequest: IAuthEngine[\"onRelayEventRequest\"] = (event) => {\n    const { topic, payload } = event;\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    switch (reqMethod) {\n      case \"wc_authRequest\":\n        return this.onAuthRequest(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  protected onRelayEventResponse: IAuthEngine[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_authRequest\":\n        return this.onAuthResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n  // ---------- Relay Event Handlers --------------------------------- //\n\n  protected onAuthRequest: IAuthEngine[\"onAuthRequest\"] = async (topic, payload) => {\n    const {\n      requester,\n      payloadParams: { resources, statement, aud, domain, version, nonce, iat, chainId },\n    } = payload.params;\n\n    this.client.logger.info({ type: \"onAuthRequest\", topic, payload });\n\n    try {\n      const cacaoPayload: AuthEngineTypes.CacaoRequestPayload = {\n        aud,\n        domain,\n        version,\n        nonce,\n        iat,\n        statement,\n        resources,\n        chainId,\n      };\n\n      await this.client.requests.set(payload.id, {\n        requester,\n        id: payload.id,\n        cacaoPayload,\n      });\n\n      this.client.emit(\"auth_request\", {\n        id: payload.id,\n        topic,\n        params: {\n          requester,\n          cacaoPayload,\n        },\n      });\n    } catch (err: any) {\n      await this.sendError(payload.id, topic, err);\n      this.client.logger.error(err);\n    }\n  };\n\n  protected onAuthResponse: IAuthEngine[\"onAuthResponse\"] = async (topic, response) => {\n    const { id } = response;\n    this.client.logger.info({ type: \"onAuthResponse\", topic, response });\n\n    if (isJsonRpcResult(response)) {\n      const { pairingTopic } = this.client.pairingTopics.get(topic);\n      await this.client.core.pairing.activate({ topic: pairingTopic });\n\n      const { s: signature, p: payload } = response.result;\n      await this.client.requests.set(id, { id, ...response.result });\n      const reconstructed = this.formatMessage(payload, payload.iss);\n      this.client.logger.debug(\"reconstructed message:\\n\", JSON.stringify(reconstructed));\n      this.client.logger.debug(\"payload.iss:\", payload.iss);\n      this.client.logger.debug(\"signature:\", signature);\n\n      const walletAddress = getDidAddress(payload.iss);\n      const chainId = getNamespacedDidChainId(payload.iss);\n\n      if (!walletAddress) {\n        throw new Error(\"Could not derive address from `payload.iss`\");\n      }\n      if (!chainId) {\n        throw new Error(\"Could not derive chainId from `payload.iss`\");\n      }\n      this.client.logger.debug(\"walletAddress extracted from `payload.iss`:\", walletAddress);\n\n      const isValid = await verifySignature(\n        walletAddress,\n        reconstructed,\n        signature,\n        chainId,\n        this.client.projectId,\n      );\n\n      if (!isValid) {\n        this.client.emit(\"auth_response\", {\n          id,\n          topic,\n          params: { message: \"Invalid signature\", code: -1 },\n        });\n      } else {\n        this.client.emit(\"auth_response\", { id, topic, params: response });\n      }\n    } else if (isJsonRpcError(response)) {\n      this.client.emit(\"auth_response\", { id, topic, params: response });\n    }\n  };\n}\n","import { Core, Store } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { EventEmitter } from \"events\";\n\nimport { AuthClientTypes, IAuthClient } from \"./types\";\nimport { AuthEngine } from \"./controllers\";\nimport {\n  AUTH_CLIENT_PROTOCOL,\n  AUTH_CLIENT_STORAGE_PREFIX,\n  AUTH_CLIENT_VERSION,\n  AUTH_CLIENT_DEFAULT_NAME,\n  AUTH_CLIENT_PUBLIC_KEY_NAME,\n} from \"./constants\";\n\nexport class AuthClient extends IAuthClient {\n  public readonly protocol = AUTH_CLIENT_PROTOCOL;\n  public readonly version = AUTH_CLIENT_VERSION;\n\n  public name: IAuthClient[\"name\"] = AUTH_CLIENT_DEFAULT_NAME;\n  public core: IAuthClient[\"core\"];\n  public metadata: IAuthClient[\"metadata\"];\n  public projectId: IAuthClient[\"projectId\"];\n  public logger: IAuthClient[\"logger\"];\n  public events: IAuthClient[\"events\"] = new EventEmitter();\n  public engine: IAuthClient[\"engine\"];\n  public authKeys: IAuthClient[\"authKeys\"];\n  public pairingTopics: IAuthClient[\"pairingTopics\"];\n  public requests: IAuthClient[\"requests\"];\n\n  static async init(opts: AuthClientTypes.Options) {\n    const client = new AuthClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts: AuthClientTypes.Options) {\n    super(opts);\n\n    const logger =\n      typeof opts.logger !== \"undefined\" && typeof opts.logger !== \"string\"\n        ? opts.logger\n        : pino(\n            getDefaultLoggerOptions({\n              level: opts.logger || \"error\",\n            }),\n          );\n\n    this.name = opts?.name || AUTH_CLIENT_DEFAULT_NAME;\n    this.metadata = opts.metadata;\n    this.projectId = opts.projectId;\n    this.core = opts.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.authKeys = new Store(\n      this.core,\n      this.logger,\n      \"authKeys\",\n      AUTH_CLIENT_STORAGE_PREFIX,\n      () => AUTH_CLIENT_PUBLIC_KEY_NAME,\n    );\n    this.pairingTopics = new Store(\n      this.core,\n      this.logger,\n      \"pairingTopics\",\n      AUTH_CLIENT_STORAGE_PREFIX,\n    );\n    this.requests = new Store(this.core, this.logger, \"requests\", AUTH_CLIENT_STORAGE_PREFIX);\n    this.engine = new AuthEngine(this);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public emit: IAuthClient[\"emit\"] = (name, listener) => {\n    return this.events.emit(name, listener);\n  };\n\n  public on: IAuthClient[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: IAuthClient[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: IAuthClient[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: IAuthClient[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  // request wallet authentication\n  public request: IAuthClient[\"request\"] = async (params, opts) => {\n    try {\n      return await this.engine.request(params, opts);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // respond wallet authentication\n  public respond: IAuthClient[\"respond\"] = async (params, iss) => {\n    try {\n      return await this.engine.respond(params, iss);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingRequests: IAuthClient[\"getPendingRequests\"] = () => {\n    try {\n      return this.engine.getPendingRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatMessage: IAuthClient[\"formatMessage\"] = (payload, iss) => {\n    try {\n      return this.engine.formatMessage(payload, iss);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.authKeys.init();\n      await this.requests.init();\n      await this.pairingTopics.init();\n      await this.engine.init();\n      this.logger.info(`AuthClient Initialization Success`);\n      this.logger.info({ authClient: this });\n    } catch (error: any) {\n      this.logger.info(`AuthClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { randomStringForEntropy } from \"@stablelib/random\";\n\n// Reference implementation:\n// https://github.com/spruceid/siwe/blob/38140330e54af91b1fab8ba1a8169e1fcbd8d271/packages/siwe/lib/utils.ts#L44\nexport function generateNonce(): string {\n  return randomStringForEntropy(96);\n}\n","import { AuthClient as Client } from \"./client\";\n\nexport * from \"./constants\";\nexport * from \"./types\";\nexport * from \"./utils/crypto\";\n\nexport const AuthClient = Client;\nexport default Client;\n"],"names":["client","opts","ONE_DAY","FIVE_MINUTES","SEVEN_DAYS","iss","segments","address","reconstructedMessage","cacaoSignature","chainId","projectId","isValidEip191Signature","isValidEip1271Signature","message","signature","recoverAddress","hashMessage","eip1271MagicValue","dynamicTypeOffset","dynamicTypeLength","nonPrefixedSignature","nonPrefixedHashedMessage","data","response","fetch","DEFAULT_RPC_URL","generateJsonRpcId","result","error","store","request","id","params","validAudience","isValidUrl","domainInAud","hasNonce","hasValidType","expiry","isValidRequestExpiry","AUTH_REQUEST_EXPIRY_BOUNDARIES","getInternalError","pendingResponses","getPendingRequest","IAuthEngine","ENGINE_RPC_OPTS","isValidRequest","statement","aud","domain","nonce","type","pairingTopic","uri","publicKey","responseTopic","hashKey","AUTH_CLIENT_PUBLIC_KEY_NAME","respondParams","isValidRespond","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","cacao","__spreadProps","__spreadValues","getPendingRequests","header","walletAddress","getDidAddress","version","getDidChainId","issuedAt","resources","resource","val","topic","method","payload","formatJsonRpcRequest","rpcOpts","formatJsonRpcResult","record","formatJsonRpcError","knownPairing","pairing","event","reqMethod","resMethod","requester","iat","cacaoPayload","err","isJsonRpcResult","reconstructed","getNamespacedDidChainId","verifySignature","isJsonRpcError","RELAYER_EVENTS","isJsonRpcRequest","isJsonRpcResponse","AuthClient","IAuthClient","AUTH_CLIENT_PROTOCOL","AUTH_CLIENT_VERSION","AUTH_CLIENT_DEFAULT_NAME","EventEmitter","name","listener","logger","pino","getDefaultLoggerOptions","Core","generateChildLogger","Store","AUTH_CLIENT_STORAGE_PREFIX","AuthEngine","getLoggerContext","randomStringForEntropy","Client"],"mappings":"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"}