import { AuthClientTypes, IAuthClient } from "./types";
export declare class AuthClient extends IAuthClient {
    readonly protocol = "wc";
    readonly version = 1;
    name: IAuthClient["name"];
    core: IAuthClient["core"];
    metadata: IAuthClient["metadata"];
    projectId: IAuthClient["projectId"];
    logger: IAuthClient["logger"];
    events: IAuthClient["events"];
    engine: IAuthClient["engine"];
    authKeys: IAuthClient["authKeys"];
    pairingTopics: IAuthClient["pairingTopics"];
    requests: IAuthClient["requests"];
    static init(opts: AuthClientTypes.Options): Promise<AuthClient>;
    constructor(opts: AuthClientTypes.Options);
    get context(): string;
    emit: IAuthClient["emit"];
    on: IAuthClient["on"];
    once: IAuthClient["once"];
    off: IAuthClient["off"];
    removeListener: IAuthClient["removeListener"];
    request: IAuthClient["request"];
    respond: IAuthClient["respond"];
    getPendingRequests: IAuthClient["getPendingRequests"];
    formatMessage: IAuthClient["formatMessage"];
    private initialize;
}
//# sourceMappingURL=client.d.ts.map